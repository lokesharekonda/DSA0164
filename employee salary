#include <iostream>
#include <string>
class Employee {
protected:
    std::string name;
    int employeeId;
public:
    Employee(const std::string& empName, int empId)
        : name(empName), employeeId(empId) {}
    void displayEmployee() const {
        std::cout << "Employee Name: " << name << std::endl;
        std::cout << "Employee ID: " << employeeId << std::endl;
    }
};
class Salary : virtual public Employee {
protected:
    double basicSalary;
    double allowance;
public:
    Salary(const std::string& empName, int empId, double salary, double allow)
        : Employee(empName, empId), basicSalary(salary), allowance(allow) {}
    double calculateTotalSalary() const {
        return basicSalary + allowance;
    }
    void displaySalaryDetails() const {
        displayEmployee();
        std::cout << "Basic Salary: $" << basicSalary << std::endl;
        std::cout << "Allowance: $" << allowance << std::endl;
    }
};
class Deduction : virtual public Employee {
protected:
    double taxPercentage;
    double otherDeductions;
public:
    Deduction(const std::string& empName, int empId, double taxPerc, double otherDed)
        : Employee(empName, empId), taxPercentage(taxPerc), otherDeductions(otherDed) {}
    double calculateTotalDeductions(double basicSalary) const {
        return (basicSalary * (taxPercentage / 100.0)) + otherDeductions;
    }
    void displayDeductionDetails() const {
        displayEmployee();
        std::cout << "Tax Percentage: " << taxPercentage << "%" << std::endl;
        std::cout << "Other Deductions: $" << otherDeductions << std::endl;
    }
};
class FinalSalary : public Salary, public Deduction {
public:
    FinalSalary(const std::string& empName, int empId, double salary, double allow, double taxPerc, double otherDed)
        : Employee(empName, empId), Salary(empName, empId, salary, allow), Deduction(empName, empId, taxPerc, otherDed) {}
    void displayFinalSalary() const {
        displayEmployee();
        double totalSalary = calculateTotalSalary();
        double totalDeductions = calculateTotalDeductions(basicSalary);
        double netSalary = totalSalary - totalDeductions;
        std::cout << "Total Salary: $" << totalSalary << std::endl;
        std::cout << "Total Deductions: $" << totalDeductions << std::endl;
        std::cout << "Net Salary: $" << netSalary << std::endl;
    }
};
int main() {
    FinalSalary emp1("John Doe", 1001, 5000.0, 1000.0, 15.0, 500.0);
    emp1.displayFinalSalary();
    return 0;
}
