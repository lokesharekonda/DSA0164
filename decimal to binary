#include <iostream>
class DecimalToBinaryConverter {
private:
    unsigned int decimalNumber;
public:
    DecimalToBinaryConverter(unsigned int num) {
        decimalNumber = num;
    }
    unsigned long long convertToBinaryIterative() {
        unsigned long long binaryNumber = 0;
        unsigned long long base = 1;
        unsigned int temp = decimalNumber;
        while (temp > 0) {
            int remainder = temp % 2;
            binaryNumber += remainder * base;
            base *= 10;
            temp /= 2;
        }
        return binaryNumber;
    }
    unsigned long long convertToBinaryRecursive(unsigned int num) {
        if (num == 0) {
            return 0;
        } else {
            return num % 2 + 10 * convertToBinaryRecursive(num / 2);
        }
    }
};
int main() {
    unsigned int decimalNum;
    std::cout << "Enter a decimal number: ";
    std::cin >> decimalNum;
    DecimalToBinaryConverter converter(decimalNum);
    unsigned long long binaryIterative = converter.convertToBinaryIterative();
    std::cout << "Binary representation (Iterative): " << binaryIterative << std::endl;
    unsigned long long binaryRecursive = converter.convertToBinaryRecursive(decimalNum);
    std::cout << "Binary representation (Recursive): " << binaryRecursive << std::endl;
    return 0;
}
